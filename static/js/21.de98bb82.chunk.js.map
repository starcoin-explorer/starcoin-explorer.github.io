{"version":3,"sources":["modules/PendingTransactions/components/TransactionSummary/index.tsx","modules/PendingTransactions/components/Table/index.tsx","modules/PendingTransactions/components/List/index.tsx","modules/PendingTransactions/components/List/adapter.ts","modules/PendingTransactions/components/Detail/index.tsx","modules/PendingTransactions/components/Detail/adapter.ts","modules/PendingTransactions/containers/index.tsx"],"names":["Index","this","props","transaction","className","classes","isTransaction","source","payloadInHex","raw_txn","payload","txnPayload","encoding","decodeTransactionPayload","type","Object","keys","classNames","root","path","getNetwork","transaction_hash","title","rightHeader","time","timestamp","expiration_timestamp_secs","PureComponent","withStyles","theme","createStyles","breakpoints","down","paddingLeft","spacing","paddingRight","up","alignItems","borderBottom","display","justifyContent","paddingBottom","paddingTop","flex","marginRight","minWidth","transactions","map","TransactionSummary","_id","React","fetchListPage","page","getPendingTransactionList","pagination","hits","pendingTransactionList","contents","last","length","after","sort","state","currentPage","pagenationCallback","setState","isLoadingMore","t","isInitialLoad","pendingTransactions","pendingTransactionsList","CenteredView","header","Typography","variant","gutterBottom","Helmet","ListView","name","pluralName","content","Loading","pagerArea","Pagination","pageSize","currentPageSize","hasPreviousPage","hasNextPage","onPrevPage","onNextPage","isLoading","defaultProps","undefined","withTranslation","currentSelector","store","selector","actions","loadingSelector","createLoadingSelector","types","createSelector","current","loading","connect","hash","match","params","getPendingTransaction","pendingTransaction","rawContent","JSON","stringify","decodedPayloadContent","Accordion","AccordionSummary","expandIcon","aria-controls","id","AccordionDetails","rawData","network","sender","functionName","moduleName","arg0","arg1","arg2","func","ScriptFunction","module","args","bcs","BcsDeserializer","arrayify","deserializeU128","toString","e","console","log","columns","Date","parseInt","toLocaleString","formatNumber","max_gas_amount","push","formatBalance","PageView","bodyColumns","extra","generateExtra","pendignTransaction","table","width","shrinkMaxCol","shrinkCol","wordBreak","overflow","PendingTransactionsRouter","computedMatch","render","exac"],"mappings":"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","file":"static/js/21.de98bb82.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport CommonTime from '@/common/Time';\nimport CommonLink from '@/common/Link';\nimport { getNetwork } from '@/utils/helper';\nimport { withStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { encoding } from '@starcoin/starcoin';\n\nconst useStyles = (theme: Theme) => createStyles({\n  [theme.breakpoints.down('sm')]: {\n    root: {\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1),\n    },\n  },\n  [theme.breakpoints.up('sm')]: {\n    root: {\n      paddingLeft: theme.spacing(1) * 2,\n      paddingRight: theme.spacing(1) * 2,\n    },\n  },\n  root: {\n    alignItems: 'center',\n    borderBottom: '1px solid rgba(0, 0, 0, 0.075)',\n    display: 'flex',\n    justifyContent: 'space-between',\n    paddingBottom: theme.spacing(1),\n    paddingTop: theme.spacing(1),\n  },\n  leftHeader: {\n    flex: '1 100 auto',\n    marginRight: theme.spacing(1),\n    minWidth: 150,\n  },\n  rightHeader: {\n    alignItems: 'center',\n    display: 'flex',\n    flex: '1 1 208px',\n    justifyContent: 'flex-end',\n    minWidth: '0',\n  },\n  time: {\n    marginRight: theme.spacing(1),\n  },\n});\n\ninterface ExternalProps {\n  transaction: any,\n  className?: string,\n}\n\ninterface InternalProps {\n  classes: any,\n}\n\ninterface Props extends ExternalProps, InternalProps {}\n\nclass Index extends PureComponent<Props> {\n  render() {\n    const { transaction, className, classes } = this.props;\n    const isTransaction = !!transaction;\n    const source = isTransaction ? transaction : transaction;\n    let payloadInHex = '';\n    if (source.raw_txn) {\n      payloadInHex = source.raw_txn.payload;\n    }\n    const txnPayload = payloadInHex ? encoding.decodeTransactionPayload(payloadInHex) : [];\n    const type = Object.keys(txnPayload)[0];\n    return (\n      <div className={classNames(classes.root, className)}>\n        {type}&nbsp;\n        <CommonLink path={`/${getNetwork()}/pending_transactions/detail/${source.transaction_hash}`} title={source.transaction_hash} />\n        <div className={classes.rightHeader}>\n          <CommonTime\n            className={classes.time}\n            time={isTransaction ? source.timestamp : source.raw_txn.expiration_timestamp_secs * 1000}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(useStyles)(Index);\n","import React from 'react';\nimport TransactionSummary from '../TransactionSummary';\n\ninterface ExternalProps {\n  transactions: any,\n  className?: string,\n}\n\ninterface InternalProps {}\n\ninterface Props extends ExternalProps, InternalProps {}\n\nclass Index extends React.PureComponent<Props> {\n  render() {\n    const { transactions, className } = this.props;\n    return (\n      <div className={className}>\n        {transactions.map((transaction: any) => (\n          <TransactionSummary\n            key={transaction._id || transaction.transaction_hash}\n            transaction={transaction}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Index;\n","import React, { PureComponent } from 'react';\nimport { withTranslation } from 'react-i18next';\nimport Helmet from 'react-helmet';\nimport { createStyles, withStyles } from '@material-ui/core/styles';\nimport Loading from '@/common/Loading';\nimport ListView from '@/common/View/ListView';\nimport Pagination from '@/common/View/Pagination';\nimport Typography from '@material-ui/core/Typography';\nimport CenteredView from '@/common/View/CenteredView';\nimport TransactionTable from '../Table';\n\nconst useStyles = () => createStyles({\n  pagerArea: {\n    alignItems: 'center',\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n});\n\ninterface ExternalProps {\n  className?: string,\n}\n\ninterface InternalProps {\n  pendingTransactionList: any,\n  isLoadingMore: boolean,\n  getPendingTransactionList: (contents: any, callback?: any) => any,\n  classes: any,\n  t: any,\n}\n\ninterface Props extends ExternalProps, InternalProps {}\n\ninterface IndexState {\n  currentPage: number\n}\n\nclass Index extends PureComponent<Props, IndexState> {\n  // eslint-disable-next-line react/static-property-placement\n  static defaultProps = {\n    pendingTransactionList: null,\n    isLoadingMore: undefined,\n    getPendingTransactionList: () => {}\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      currentPage: 1,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchListPage(this.state.currentPage);\n  }\n\n  fetchListPage = (page: number) => {\n    this.props.getPendingTransactionList({ page });\n  };\n\n  pagination = (type: string) => {\n    // transactions use timestamp as sort filed, so we can not jump to specific page\n    const hits = this.props.pendingTransactionList ? this.props.pendingTransactionList.contents : [];\n    const last = hits[hits.length - 1];\n    const after = last && last.sort || 0;\n    if (type === 'prev' && this.state.currentPage > 1) {\n      const page = this.state.currentPage - 1;\n      this.props.getPendingTransactionList({ page, after }, () => { this.pagenationCallback(page); });\n    } else if (type === 'next') {\n      const page = this.state.currentPage + 1;\n      this.props.getPendingTransactionList({ page, after }, () => { this.pagenationCallback(page); });\n    }\n  };\n\n  pagenationCallback = (page: number) => {\n    this.setState({ currentPage: page });\n  };\n\n  render() {\n    const { pendingTransactionList, isLoadingMore, className, classes, t } = this.props;\n    const isInitialLoad = !pendingTransactionList;\n    const pendingTransactions = pendingTransactionList && pendingTransactionList.contents || [];\n    const pendingTransactionsList = pendingTransactions.length ? (\n      <TransactionTable\n        transactions={pendingTransactions}\n      />\n    ) : (\n      <CenteredView>\n        <div className={classes.header}>\n          <Typography variant=\"h5\" gutterBottom className={classes.title}>\n            {t('pending_transaction.NoPendingTransactionData')}\n          </Typography>\n        </div>\n      </CenteredView>\n    );\n    return (\n      <div>\n        <Helmet>\n          <title>{t('header.pendingTransactions')}</title>\n        </Helmet>\n        <ListView\n          className={className}\n          title={t('header.pendingTransactions')}\n          name={t('header.pendingTransactions')}\n          pluralName={t('header.pendingTransactions')}\n          content={\n            <div>\n              {isInitialLoad ? <Loading /> : pendingTransactionsList}\n              <div className={classes.pagerArea}>\n                <Pagination\n                  page={this.state.currentPage}\n                  pageSize={20}\n                  currentPageSize={pendingTransactions == null ? null : pendingTransactions.length}\n                  hasPreviousPage={this.state.currentPage > 1}\n                  hasNextPage={!!true}\n                  onPrevPage={() => this.pagination('prev')}\n                  onNextPage={() => this.pagination('next')}\n                  isLoading={isLoadingMore}\n                />\n              </div>\n            </div>\n          }\n        />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(useStyles)(withTranslation()(Index));\n","import { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n// @ts-ignore\nimport createLoadingSelector  from '@/rootStore/loading/selector';\nimport store from '@/Transactions/store';\nimport * as types from '@/Transactions/store/constants';\nimport Index from './index';\n\nconst { selector: currentSelector, actions } = store;\n\nconst loadingSelector = createLoadingSelector([types.GET_PENDING_TRANSACTION_LIST]);\n\nconst selector = createSelector(\n  currentSelector,\n  loadingSelector,\n  (current, loading) => ({\n    pendingTransactionList: current.pendingTransactionList,\n    isLoadingMore: current.isLoadingMore,\n    loading\n  })\n);\n\nexport default connect(selector, {\n  getPendingTransactionList: actions.getPendingTransactionList\n})(Index) as any;","import React, { PureComponent } from 'react';\nimport { withTranslation } from 'react-i18next';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport formatNumber from '@/utils/formatNumber';\nimport CommonLink from '@/common/Link';\nimport PageView from '@/common/View/PageView';\n// import EventViewTable from '@/common/View/EventViewTable';\nimport Loading from '@/common/Loading';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\n// import { onchain_events, encoding, types, bcs } from '@starcoin/starcoin';\nimport { encoding, types, bcs } from '@starcoin/starcoin';\nimport { arrayify } from '@ethersproject/bytes';\n// import get from 'lodash/get';\n// import { formatBalance, toObject } from '@/utils/helper';\nimport { formatBalance } from '@/utils/helper';\n// import BaseRouteLink from '@/common/BaseRouteLink';\n\nconst useStyles = () => createStyles({\n  table: {\n    width: '100%',\n    display: 'block',\n  },\n  shrinkMaxCol: {\n    flex: '1 100 auto',\n    minWidth: 60,\n  },\n  shrinkCol: {\n    flex: '1 10 auto',\n  },\n  rawData: {\n    wordBreak: 'break-all',\n    overflow: 'auto',\n  }\n});\n\ninterface IndexProps {\n  classes: any;\n  t: any;\n  match: any;\n  // transaction: any;\n  // getTransaction: (data: any, callback?: any) => any;\n  pendingTransaction: any;\n  getPendingTransaction: (data: any, callback?: any) => any;\n}\n\nclass Index extends PureComponent<IndexProps> {\n  // eslint-disable-next-line react/static-property-placement\n  static defaultProps = {\n    match: {},\n    // transaction: null,\n    // getTransaction: () => { }\n    pendignTransaction: null,\n    getPendingTransaction: () => { }\n  };\n\n  componentDidMount() {\n    const hash = this.props.match.params.hash;\n    this.props.getPendingTransaction({ hash });\n  }\n\n  generateExtra() {\n    const { pendingTransaction, classes, t } = this.props;\n    const isInitialLoad = !pendingTransaction;\n\n    /*\n    const events = get(transaction, 'events', []);\n    const eventsTable: any[] = [];\n\n    for (let i = 0; i < events.length; i++) {\n      const columns: any[] = [];\n      const event = events[i];\n      const eventTypeArray = event.type_tag.split('::');\n      const eventModule = eventTypeArray[1];\n      const eventName = eventTypeArray[2];\n      // const eventModule = 'Account';\n      // const eventName = 'WithdrawEvent';\n      let eventDataDetail;\n      let eventKeyDetail;\n      try {\n        const de = onchain_events.decodeEventData(eventName, event.data);\n        eventDataDetail = toObject(de.toJS());\n      } catch (e) {\n        console.log(e);\n        eventDataDetail = event.data;\n      }\n\n      try {\n        const eventKeyInHex = event.event_key;\n        const de = onchain_events.decodeEventKey(eventKeyInHex);\n        eventKeyDetail = toObject(de);\n      } catch (e) {\n        console.log(e);\n        eventKeyDetail = event.event_key;\n      }\n      columns.push([t('event.Data'), eventDataDetail]);\n      columns.push([t('event.Module'), eventModule]);\n      columns.push([t('event.Name'), eventName]);\n      columns.push([t('event.Key'), eventKeyDetail]);\n      columns.push([t('event.Seq'), formatNumber(event.event_seq_number)]);\n      eventsTable.push(<EventViewTable key={event.event_key} columns={columns} />);\n    }\n    */\n\n    const source = pendingTransaction;\n    let payloadInHex = '';\n    if (source && source.raw_txn) {\n      payloadInHex = source.raw_txn.payload;\n    }\n    const txnPayload = payloadInHex ? encoding.decodeTransactionPayload(payloadInHex) : [];\n\n    // const eventsContent = events.length ? eventsTable : <Typography variant=\"body1\">{t('event.NoEventData')}</Typography>;\n    const rawContent = <pre>{JSON.stringify(pendingTransaction, null, 2)}</pre> || <Typography variant=\"body1\">{t('transaction.NoRawData')}</Typography>;\n    const decodedPayloadContent = <pre>{JSON.stringify(txnPayload, null, 2)}</pre> || <Typography variant=\"body1\">{t('transaction.NoDecodedPayload')}</Typography>;\n    return (\n      <div>\n        {/*\n        <br />\n        <Accordion>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <Typography variant=\"h5\" gutterBottom>{t('header.events')}</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <div className={classes.table}>\n              <div className={classes.table}>\n                {isInitialLoad ? <Loading /> : eventsContent}\n              </div>\n            </div>\n          </AccordionDetails>\n        </Accordion>\n        */}\n        <br />\n        <Accordion>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <Typography variant=\"h5\" gutterBottom>{t('transaction.RawData')}</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <div className={classes.rawData}>\n              {isInitialLoad ? <Loading /> : rawContent}\n            </div>\n          </AccordionDetails>\n        </Accordion>\n        <br />\n        <Accordion>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <Typography variant=\"h5\" gutterBottom>{t('transaction.decodedPayload')}</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <div className={classes.rawData}>\n              {isInitialLoad ? <Loading /> : decodedPayloadContent}\n            </div>\n          </AccordionDetails>\n        </Accordion>\n      </div>\n    );\n  }\n\n  render() {\n    const { pendingTransaction, match, t } = this.props;\n    if (!pendingTransaction) {\n      return <Loading />;\n    }\n    const network = match.params.network;\n    const source = pendingTransaction;\n    let payloadInHex = '';\n    let sender = '';\n    if (source && source.raw_txn) {\n      payloadInHex = source.raw_txn.payload;\n      sender = source.raw_txn.sender;\n    }\n    const txnPayload = payloadInHex ? encoding.decodeTransactionPayload(payloadInHex) : [];\n    const type = Object.keys(txnPayload)[0];\n\n    let functionName;\n    let moduleName;\n    let arg0;\n    let arg1;\n    let arg2;\n    if ('ScriptFunction' in txnPayload) {\n      const func = txnPayload.ScriptFunction.func as { address: types.AccountAddress, module: types.Identifier, functionName: types.Identifier };\n      functionName = func.functionName;\n      moduleName = func.module;\n      const args = txnPayload.ScriptFunction.args;\n      let de2;\n      try {\n        arg0 = args[0];\n        arg1 = args[1];\n        de2 = new bcs.BcsDeserializer(arrayify(args[2]));\n        arg2 = de2.deserializeU128().toString();\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    const columns = [\n      [t('common.Hash'), source.transaction_hash],\n      [t('transaction.Type'), type],\n      // [t('transaction.BlockHash'), <CommonLink path={`/${network}/blocks/detail/${source.block_hash}`} title={source.block_hash} />],\n      // [t('transaction.BlockHeight'), <BaseRouteLink to={`/${network}/blocks/height/${source.block_number}`}>{formatNumber(source.block_number)}</BaseRouteLink>],\n\n      [t('common.Time'), new Date(parseInt(source.timestamp, 10)).toLocaleString()],\n      [t('common.ExpireTime'), new Date(parseInt(source.raw_txn.expiration_timestamp_secs, 10) * 1000).toLocaleString()],\n      // [t('transaction.StateRootHash'), source.state_root_hash],\n      // [t('transaction.Status'), source.status],\n      // [t('common.GasUsed'), source.gas_used],\n      [t('common.MaxGasAmount'), formatNumber(source.raw_txn.max_gas_amount)],\n      [t('transaction.Sender'), <CommonLink path={`/${network}/address/${sender}`} title={sender} />]\n    ];\n\n    if (moduleName) {\n      columns.push([t('transaction.FunctionModuleName'), moduleName]);\n    }\n    if (functionName) {\n      columns.push([t('transaction.FunctionName'), functionName]);\n    }\n    if (arg0) {\n      columns.push([t('transaction.arg0'), <CommonLink path={`/${network}/address/${arg0}`} title={arg0} />]);\n    }\n    if (arg1) {\n      columns.push([t('transaction.arg1'), arg1]);\n    }\n    if (arg2) {\n      columns.push([t('transaction.arg2'), `${formatBalance(arg2)} STC`]);\n    }\n\n    return (\n      <PageView\n        id={source.transaction_hash}\n        title={t('pending_transaction.title')}\n        name={t('pending_transaction.title')}\n        pluralName={t('pending_transaction.title')}\n        bodyColumns={columns}\n        extra={this.generateExtra()}\n      />\n    );\n  }\n}\n\nexport default withStyles(useStyles)(withTranslation()(Index));\n","import { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport createLoadingSelector  from '@/rootStore/loading/selector';\nimport store from '@/Transactions/store';\nimport * as types from '@/Transactions/store/constants';\nimport Index from './index';\n\nconst { selector: currentSelector, actions } = store;\n\nconst loadingSelector = createLoadingSelector([types.GET_PENDING_TRANSACTION]);\n\nconst selector = createSelector(\n  currentSelector,\n  loadingSelector,\n  (current, loading) => ({\n    pendingTransaction: current.pendingTransaction,\n    loading\n  })\n);\n\nexport default connect(selector, {\n  getPendingTransaction: actions.getPendingTransaction\n})(Index) as any;","import React, { PureComponent } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport List from '../components/List/adapter';\nimport Detail from '../components/Detail/adapter';\n\ninterface PendingTransactionsRouterProps {\n  computedMatch: any;\n}\n\nclass PendingTransactionsRouter extends PureComponent<PendingTransactionsRouterProps> {\n  render() {\n    const { computedMatch: match } = this.props;\n    return (\n      <Switch>\n        <Route path={`${match.path}/detail/:hash`} render={(props: any) => (<Detail {...props} />)} />\n        <Route exac path={`${match.path}`} render={(props: any) => (<List {...props} />)} />\n      </Switch>\n    );\n  }\n}\n\nexport default PendingTransactionsRouter;\n"],"sourceRoot":""}