{"version":3,"sources":["rootStore/loading/selector.ts","utils/withRouter.tsx","modules/Error404/index.tsx","modules/Search/index.tsx","modules/Search/adapter.ts"],"names":["createLoadingSelector","actions","state","some","action","get","withRouter","Child","props","location","useLocation","navigate","useNavigate","params","useParams","Index","PureComponent","render","classes","t","this","className","root","container","justifyContent","item","xs","md","lg","card","variant","headline","dangerouslySetInnerHTML","__html","withStyles","theme","createStyles","padding","alignItems","display","flexDirection","backgroundColor","palette","mode","grey","undefined","color","getContrastText","background","paper","paddingBottom","withTranslation","Search","constructor","super","showLoading","componentDidMount","keyword","indexOf","replaceAll","searchKeyword","showNotFound","setState","Loading","Error404","defaultProps","computedMatch","storeSearch","loadingSelector","typesSearch","selector","createSelector","loading","connect"],"mappings":"+HACA,sBAMeA,IAJgBC,GAAkBC,GACxCD,EAAQE,MAAMC,GAAgBC,IAAIH,EAAQ,WAAUE,Q,iCCJ7D,0DAUO,SAASE,EAAmCC,GACjD,OAASC,IACP,MAAMC,EAAWC,cACXC,EAAWC,cACXC,EAASC,cACf,OAAO,cAACP,EAAD,IAAYC,EAAaG,SAAWA,EAAWF,SAAWA,EAAWI,OAASA,O,iCCfzF,uFA+BA,MAAME,UAAcC,gBAClBC,SACE,MAAM,QAAEC,EAAF,EAAWC,GAAMC,KAAKZ,MAC5B,OACE,gCACE,cAAC,IAAD,UACE,0CAEF,cAAC,IAAD,CAAMa,UAAWH,EAAQI,KAAMC,WAAS,EAACC,eAAe,SAAxD,SACE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,SACE,eAAC,IAAD,CAAMP,UAAWH,EAAQW,KAAzB,UACE,cAAC,IAAD,CAAYC,QAAQ,KAAKT,UAAWH,EAAQa,SAA5C,SACGZ,EAAE,yBAEL,qBAAKa,wBAAyB,CAAEC,OAAQd,EAAE,2CASzCe,uBA9CIC,GAAeC,YAAa,CAC7Cd,KAAM,CACJe,QAAS,IAEXR,KAAM,CACJS,WAAY,SACZC,QAAS,OACTC,cAAe,SACfhB,eAAgB,SAChBa,QAAS,GACTI,gBAAwC,SAAvBN,EAAMO,QAAQC,KAAkBR,EAAMO,QAAQE,KAAK,UAAOC,EAC3EC,MAAOX,EAAMO,QAAQK,gBAAgBZ,EAAMO,QAAQM,WAAWC,QAEhElB,SAAU,CACRmB,cAAe,MAgCJhB,CAAsBiB,cAAkBpC,K,+HCxCvD,MAAMqC,UAAepC,gBAQnBqC,YAAY7C,GACV8C,MAAM9C,GACNY,KAAKlB,MAAQ,CACXqD,aAAa,GAIjBC,oBACE,IAAIC,EAAUrC,KAAKZ,MAAMK,OAAO4C,QAC5BA,EAAQC,QAAQ,KAAO,IACzBD,EAAUA,EAAQE,WAAW,IAAK,KAEpCvC,KAAKZ,MAAMoD,cAAcH,GAAS,IAAMrC,KAAKyC,iBAG/CA,eACEzC,KAAK0C,SAAS,CAAEP,aAAa,IAG/BtC,SACE,OAAIG,KAAKlB,MAAMqD,YACN,cAACQ,EAAA,EAAD,IAGF,cAACC,EAAA,QAAD,KAhCLZ,EAEGa,aAAe,CACpBC,cAAe,GACfN,cAAe,QAgCHtD,kBAAW8C,GC3C3B,MAAM,QAAEnD,GAAYkE,IAEdC,EAAkBpE,YAAsB,CAACqE,MAEzCC,EAAWC,YACfH,GACCI,IAAD,CACEA,cAIWC,sBAAQH,EAAU,CAC/BV,cAAe3D,EAAQ2D,eADVa,CAEZ1D","file":"static/js/32.aa03e10b.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\nimport get from 'lodash/get';\n\nconst createLoadingSelector = (actions: any) => (state: any) => {\n  return actions.some((action: any) => get(state, `loading.${action}`));\n};\n\nexport default createLoadingSelector;","import React from \"react\";\nimport { NavigateFunction, useLocation, useNavigate, useParams } from \"react-router\";\n\nexport interface RoutedProps<Params = any, State = any> {\n  location: State;\n  navigate: NavigateFunction;\n  params: Params;\n}\n\n\nexport function withRouter<P extends RoutedProps>( Child: React.ComponentClass<P> ) {\n  return ( props: Omit<P, keyof RoutedProps> ) => {\n    const location = useLocation();\n    const navigate = useNavigate();\n    const params = useParams();\n    return <Child { ...props as P } navigate={ navigate } location={ location } params={ params }/>;\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Helmet } from 'react-helmet-async';\nimport { createStyles, withStyles } from '@mui/styles';\nimport Grid from '@mui/material/Grid';\nimport Card from '@mui/material/Card';\nimport Typography from '@mui/material/Typography';\n\nconst useStyles = (theme: any) => createStyles({\n  root: {\n    padding: 16,\n  },\n  card: {\n    alignItems: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    padding: 24,\n    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.grey[800] : undefined,\n    color: theme.palette.getContrastText(theme.palette.background.paper),\n  },\n  headline: {\n    paddingBottom: 8,\n  },\n});\n\ninterface IndexProps {\n  classes: any;\n  t: any;\n}\n\nclass Index extends PureComponent<IndexProps> {\n  render() {\n    const { classes, t } = this.props;\n    return (\n      <div>\n        <Helmet>\n          <title>404</title>\n        </Helmet>\n        <Grid className={classes.root} container justifyContent='center'>\n          <Grid item xs={12} md={8} lg={4}>\n            <Card className={classes.card}>\n              <Typography variant='h5' className={classes.headline}>\n                {t('home.searchNotFound')}\n              </Typography>\n              <div dangerouslySetInnerHTML={{ __html: t('home.searchNotFoundDetail') }} />\n            </Card>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(useStyles)(withTranslation()(Index));\n","import React, { PureComponent } from 'react';\nimport Loading from '@/common/Loading';\nimport Error404 from '../Error404';\nimport {withRouter,RoutedProps} from '@/utils/withRouter';\n\ninterface IndexProps extends RoutedProps{\n  path: any;\n  searchKeyword: (data: any, callback?: any) => any;\n}\n\ninterface IndexState {\n  showLoading: boolean,\n}\n\nclass Search extends PureComponent<IndexProps, IndexState> {\n  // eslint-disable-next-line react/static-property-placement\n  static defaultProps = {\n    computedMatch: {},\n    searchKeyword: () => {\n    },\n  };\n\n  constructor(props: IndexProps) {\n    super(props);\n    this.state = {\n      showLoading: true,\n    };\n  }\n\n  componentDidMount() {\n    let keyword = this.props.params.keyword;\n    if (keyword.indexOf(',') > 0) {\n      keyword = keyword.replaceAll(',', '');\n    }\n    this.props.searchKeyword(keyword, () => this.showNotFound());\n  }\n\n  showNotFound() {\n    this.setState({ showLoading: false });\n  }\n\n  render() {\n    if (this.state.showLoading) {\n      return <Loading />;\n    }\n\n    return <Error404 />;\n  }\n}\n\nexport default  withRouter(Search);\n","import { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport createLoadingSelector from '@/rootStore/loading/selector';\nimport storeSearch from '@/Search/store';\nimport * as typesSearch from '@/Search/store/constants';\nimport Index from './index';\n\nconst { actions } = storeSearch;\n\nconst loadingSelector = createLoadingSelector([typesSearch.SEARCH_KEYWORD]);\n\nconst selector = createSelector(\n  loadingSelector,\n  (loading) => ({\n    loading,\n  }),\n);\n\nexport default connect(selector, {\n  searchKeyword: actions.searchKeyword,\n})(Index as any) as any;"],"sourceRoot":""}