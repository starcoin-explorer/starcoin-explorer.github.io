{"version":3,"sources":["router/beforeRouter.ts","utils/dayjs.ts","modules/walletLogin/page/APIKeys/index.tsx"],"names":["useRouterBeforeEach","navigate","useNavigate","location","useLocation","auth","setAuth","useState","useEffect","Cookies","get","pathname","indexOf","dayjs","extend","utc","timezone","isSameOrAfter","duration","selector","currentSelector","storeLogin","createSelector","current","withStyles","theme","createStyles","title","color","palette","mode","fontWeight","addBtn","background","marginLeft","from","width","margin","padding","labelName","textAlign","formLabel","display","labelItem","props","state","useSelector","t","useTranslation","classes","list","setlist","fromCreate","setFromCreate","editItem","setEditItem","alert","setAlert","open","severity","message","useTheme","styles","spacing","getContrastText","paper","borderBottom","init","apiKeyList","address","accounts","then","res","status","data","catch","error","console","log","openAdd","setOpenAdd","React","handleCloseAdd","openEdit","setOpenEdit","_jsx","_Fragment","children","_jsxs","Card","className","Button","onClick","handleClickOpenAdd","AddIcon","TableContainer","Table","sx","minWidth","TableHead","TableRow","TableCell","align","TableBody","map","item","border","component","scope","handleClickOpenEdit","api_key","date","create_time","format","tz","guess","getFormatDate","Snackbar","autoHideDuration","onClose","closeAlert","Alert","variant","Dialog","backgroundColor","default","fullWidth","DialogTitle","DialogContent","InputLabel","Input","onChange","e","target","value","DialogActions","async","addApiKey","app_name","handleCloseEdit","code","getQrCode","userInfo","wallet_addr","opt","sign","getSign","removeApiKey","app_key","updateApiKey"],"mappings":"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","file":"static/js/38.82f290a8.chunk.js","sourcesContent":["import {useNavigate,useLocation,useResolvedPath } from \"react-router-dom\";\nimport { Outlet } from 'react-router-dom'\nimport {useEffect,useState} from 'react'\nimport Cookies from 'js-cookie'\n\nconst useRouterBeforeEach = ()=>{\n  const navigate = useNavigate()\n  const location = useLocation()\n  const [auth,setAuth] = useState(false)\n  useEffect(()=>{\n    if(!Cookies.get('wallet_status') && location.pathname.indexOf('/user') !== -1){\n      navigate('/error')\n    }\n  },[])\n} \n \nexport default useRouterBeforeEach","import dayjs from \"dayjs\";\nimport timezone from \"dayjs/plugin/timezone\";\nimport utc from \"dayjs/plugin/utc\";\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\nimport isSameOrAfter from \"dayjs/plugin/isSameOrAfter\";\nimport duration from \"dayjs/plugin/duration\";\ndayjs.extend(isSameOrAfter);\ndayjs.extend(duration);\n\nexport const getFormatDate = (date:any, format:string) => {\n    return dayjs(date).tz(dayjs.tz.guess()).format(format);\n};","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, createStyles, useTheme } from '@mui/styles';\nimport { Alert, Button, Card, Dialog, DialogActions, DialogContent, DialogTitle, Input, InputLabel, Snackbar, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Theme } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\n\n\nimport { useTranslation } from 'react-i18next';\n// import classNames from 'classnames';\nimport { createSelector } from 'reselect';\n// import { formatBalance, shortenAddress } from '@/utils/helper';\nimport { getFormatDate } from '@/utils/dayjs';\nimport useRouterBeforeEach from 'router/beforeRouter';\nimport { useSelector } from 'react-redux';\nimport storeLogin from '@/walletLogin/store';\nimport { addApiKey, apiKeyList, getQrCode, removeApiKey, updateApiKey } from '@/walletLogin/store/apis';\nimport { APIKeysItem } from '@/walletLogin/type';\nimport { getSign } from '../../../../wallet/starMask';\n\nconst useStyles = (theme:Theme) => createStyles({\n    title: {\n        color: theme.palette.mode === 'dark' ?\"#fff\" : \"#000\",\n        fontWeight: 'bold'\n    },\n    addBtn: {\n        color: theme.palette.mode === 'dark' ?\"#fff\" : \"#000\",\n        background: theme.palette.mode === 'dark' ? \"rgb(33, 36, 41)\" : \"#fff\",\n        marginLeft: '10px',\n        '&:hover': {\n            background:  theme.palette.mode === 'dark' ?\"rgb(33, 36, 41)\" : \"#fff\",\n        },\n    },\n    from: {\n        width: '800px',\n        margin: '100px auto',\n        padding: '50px',\n        background: theme.palette.mode === 'dark' ? '#424242' : \"rgb(237, 238, 242)\",\n    },\n    labelName: {\n        width: '33%',\n        textAlign: 'right',\n\n    },\n    formLabel: {\n        // color: '#fff',\n        width: '100%',\n        display: 'flex',\n        margin: '20px 0'\n    },\n    labelItem: {\n        width: '66%'\n    }\n});\nconst { selector: currentSelector } = storeLogin;\n\n\nconst selector = createSelector(\n    currentSelector,\n    (current) => ({\n        ...current,\n    }),\n);\n\nfunction Wallet(props: any) {\n    const state = useSelector(selector);\n    // const dispatch = useDispatch();\n    const { t }: { t: any, i18n: any } = useTranslation();\n    const { classes } = props;\n    const [list, setlist] = useState<APIKeysItem[]>([])\n    const [fromCreate, setFromCreate] = useState<string>('');\n    const [editItem, setEditItem] = useState<APIKeysItem>({});\n    useRouterBeforeEach();\n    const [alert, setAlert] = useState<any>({\n        open: false,\n        severity: 'success',\n        message: ''\n    })\n    const theme = useTheme() as any\n    const styles = {\n        padding: theme.spacing(1),\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        borderBottom: theme.palette.mode === 'dark' ? '1px solid rgba(256, 256, 256, 0.075)' : '1px solid rgba(0, 0, 0, 0.075)'\n    }\n    const init = () => {\n        apiKeyList({ address: state.accounts[0] }).then((res: any) => {\n            if (res.status === '200') {\n                setlist(res.data)\n            }\n        }).catch((error: any) => {\n            console.log(error)\n        })\n    }\n\n    useEffect(() => {\n        if (state.accounts[0]) {\n            init()\n        }\n        // eslint-disable-next-line\n    }, [state.accounts])\n\n    const [openAdd, setOpenAdd] = React.useState(false);\n    const handleClickOpenAdd = () => {\n        setFromCreate('');\n        setOpenAdd(true);\n    };\n\n    const handleCloseAdd = () => {\n        setOpenAdd(false);\n    };\n    const create = async () => {\n        try {\n            const res = await addApiKey({\n                address: state.accounts[0],\n                app_name: fromCreate\n            })\n            if (res.status === '200') {\n                setAlert({\n                    ...alert,\n                    open: true,\n                    severity: 'success',\n                    message: t(\"common.success\")\n                })\n            } else {\n                setAlert({\n                    ...alert,\n                    open: true,\n                    severity: 'error',\n                    message: t(\"common.fail\")\n                })\n            }\n        } catch (error:any) {\n            setAlert({\n                ...alert,\n                open: true,\n                severity: 'error',\n                message: error?.message\n            })\n        }\n        \n        init()\n        setOpenAdd(false);\n    }\n    const edit = async () => {\n        try{\n            const res = await updateApiKey({\n                // address: state.accounts[0],\n                app_name: editItem.app_name,\n                app_key: editItem.api_key\n            })\n            if (res.status === '200') {\n                setAlert({\n                    ...alert,\n                    open: true,\n                    severity: 'success',\n                    message: t(\"common.success\")\n                })\n            } else {\n                setAlert({\n                    ...alert,\n                    open: true,\n                    severity: 'error',\n                    message: t(\"common.fail\")\n                })\n            }\n        }catch(error:any){\n            setAlert({\n                ...alert,\n                open: true,\n                severity: 'error',\n                message: error?.message\n            })\n        }\n        \n        init()\n        setOpenEdit(false);\n    }\n    const changeEdit = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setEditItem({\n            ...editItem,\n            app_name: e.target.value\n        })\n    }\n    const [openEdit, setOpenEdit] = React.useState(false);\n    const handleClickOpenEdit = (item: APIKeysItem) => {\n        setEditItem(item);\n        setOpenEdit(true);\n    };\n\n    const itemDelete = async () => {\n        try {\n            const code = await getQrCode({ address: state.userInfo.wallet_addr, opt:4 });\n            const sign = await getSign(state.userInfo.wallet_addr,`STCSCAN_DESTROY_APIKEY_CODE:${code.data}`,1);\n            const res = await removeApiKey({\n                app_key: editItem.api_key,\n                address:state.userInfo.wallet_addr,\n                sign\n            })\n            if (res.status === '200') {\n                setAlert({\n                    ...alert,\n                    open: true,\n                    severity: 'success',\n                    message: t(\"common.success\")\n                })\n            } else {\n                setAlert({\n                    ...alert,\n                    open: true,\n                    severity: 'error',\n                    message: res.message\n                })\n            }\n        } catch (error:any) {\n            setAlert({\n                ...alert,\n                open: true,\n                severity: 'error',\n                message: error?.message\n            })\n        }\n      \n        init()\n        setOpenEdit(false);\n    };\n    const appNameChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setFromCreate(e.target.value)\n    }\n    const handleCloseEdit = () => {\n        setOpenEdit(false);\n    }\n    const closeAlert = () => {\n        setAlert({\n            ...alert,\n            open: false\n        })\n    }\n    return <>\n        <Card className={classes.from}>\n            <div className={classes.title}>\n                <span>{t('APIkeys.My API Keys')}</span>\n                <Button className={classes.addBtn} onClick={handleClickOpenAdd}>\n                    <AddIcon />\n                    {t('APIkeys.Add')}\n                </Button>\n            </div>\n            <TableContainer>\n                <Table sx={{ minWidth: 400 }} aria-label='simple table'>\n                    <TableHead>\n                        <TableRow >\n                            <TableCell sx={styles} align='center'>{t('APIkeys.Action')}</TableCell>\n                            <TableCell sx={styles} align='left'>{t('APIkeys.API-Key Token')}</TableCell>\n                            <TableCell sx={styles} align='left'>{t('APIkeys.Created')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {list.map((item) => {\n                            return <TableRow\n                                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                                key={item.api_key}\n                            >\n                                <TableCell sx={styles} align='center' component='th' scope='row'>\n                                    <Button onClick={() => { handleClickOpenEdit(item) }}>{t('APIkeys.Edit')}</Button>\n                                </TableCell>\n\n                                <TableCell sx={styles} align='left' >{item.api_key}</TableCell>\n                                <TableCell sx={styles} align='left' > {getFormatDate(item.create_time, \"YYYY-MM-DD HH:mm:ss\")}</TableCell>\n                            </TableRow>\n                        })}\n\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <Snackbar open={alert.open} autoHideDuration={6000} onClose={closeAlert}>\n                <Alert variant=\"filled\" severity={alert.severity} sx={{ width: '100%' }}>\n                    {alert.message}\n                </Alert>\n            </Snackbar>\n            <Dialog\n                open={openAdd}\n                sx={{\n                    \"& .MuiDialog-paper\": {\n                        backgroundColor: theme.palette.background.default,\n                        color: theme.palette.getContrastText(theme.palette.background.paper),\n                    }\n                }}\n                fullWidth={true as boolean}\n                onClose={handleCloseAdd}\n            >\n                <DialogTitle>{t('APIkeys.Create a new API-KEY token')}</DialogTitle>\n                <DialogContent>\n                    <InputLabel className={classes.formLabel} error={false}>\n                        <div className={classes.labelName}>\n                            {t('APIkeys.AppName')}：\n                        </div>\n                        <div className={classes.labelItem}>\n                            <Input onChange={appNameChange} />\n\n                        </div>\n                    </InputLabel>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCloseAdd}>{t('APIkeys.Cancel')}</Button>\n                    <Button onClick={create}>{t('APIkeys.Create')}</Button>\n                </DialogActions>\n            </Dialog>\n            <Dialog\n                sx={{\n                    \"& .MuiDialog-paper\": {\n                        backgroundColor: theme.palette.background.default,\n                        color: theme.palette.getContrastText(theme.palette.background.paper),\n                    }\n                }}\n                fullWidth={true as boolean}\n                open={openEdit}\n                onClose={handleCloseEdit}\n            >\n                <DialogTitle>{t('APIkeys.Edit a new API-KEY token')}</DialogTitle>\n                <DialogContent>\n                    <InputLabel className={classes.formLabel} error={false}>\n                        <div className={classes.labelName}>\n                            {t('APIkeys.ApiKey')}：\n                        </div>\n                        <div className={classes.labelItem}>\n                            {editItem.api_key}\n                        </div>\n                    </InputLabel>\n                    <InputLabel className={classes.formLabel} error={false}>\n                        <div className={classes.labelName}>\n                            {t('APIkeys.AppName')}：\n                        </div>\n                        <div className={classes.labelItem}>\n                            <Input value={editItem.app_name} onChange={changeEdit} />\n                        </div>\n                    </InputLabel>\n                </DialogContent>\n                <DialogActions>\n                    <Button color=\"error\" onClick={itemDelete}>{t('APIkeys.Delete')}</Button>\n                    <Button onClick={edit}>{t('APIkeys.Edit')}</Button>\n                </DialogActions>\n            </Dialog>\n        </Card>\n    </>\n}\n\nWallet.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(useStyles)(Wallet);\n"],"sourceRoot":""}