{"version":3,"sources":["modules/walletLogin/page/Profile/test.tsx"],"names":["app","initializeApp","apiKey","authDomain","auth","getAuth","provider","GoogleAuthProvider","App","location","useLocation","useEffect","onAuthStateChanged","user","console","log","getRedirectResult","then","result","credential","credentialFromResult","token","accessToken","catch","error","errorCode","code","errorMessage","message","email","credentialFromError","onClick","signInWithEmailAndPassword","res","style","color","localStorage","setItem","pathname","signInWithPopup","signInWithRedirect","form","document","createElement","setAttribute","params","p","input","appendChild","body","submit"],"mappings":"+HAAA,mDAaA,MAIMA,EAAMC,YAJW,CACnBC,OAAQ,0CACRC,WAAY,6BAIVC,EAAOC,YAAQL,GAEfM,EAAW,IAAIC,IAqHNC,UApHf,WACI,MAAMC,EAAWC,cAoGjB,OAnGAC,qBAAU,KACNC,YAAmBR,GAAOS,IACtBC,QAAQC,IAAIF,EAAM,WAEtBG,YAAkBZ,GACba,MAAMC,IAEH,MAAMC,EAAaZ,IAAmBa,qBAAqBF,GACrDG,EAAQF,EAAYG,YAGpBT,EAAOK,EAAOL,KACpBC,QAAQC,IAAII,EAAYE,EAAOR,EAAM,wBACtCU,OAAOC,IAEN,MAAMC,EAAYD,EAAME,KAClBC,EAAeH,EAAMI,QAErBC,EAAQL,EAERL,EAAaZ,IAAmBuB,oBAAoBN,GAE1DV,QAAQC,IAAIU,EAAWE,EAAcE,EAAOV,EAAY,0BAGjE,IA0EI,qCACH,qBAAKY,QA1EM,KAGXC,YAA2B5B,EAFb,qBACG,cACiCa,MAAMgB,IACpDnB,QAAQC,IAAIkB,MAEXV,OAAM,UAoEWW,MAAO,CACzBC,MAAO,QADX,oBAGA,qBAAKD,MAAO,CACRC,MAAO,QACRJ,QApEQ,KAGXK,aAAaC,QAAQ,WAAY5B,EAAS6B,UAC1CC,YAAgBnC,EAAME,GACjBW,MAAMC,IAEH,MAAMC,EAAaZ,IAAmBa,qBAAqBF,GACrDG,EAAQF,EAAYG,YAEpBT,EAAOK,EAAOL,KACpBC,QAAQC,IAAII,EAAYE,EAAOR,EAAM,cAEtCU,OAAOC,IAEN,MAAMC,EAAYD,EAAME,KAClBC,EAAeH,EAAMI,QAErBC,EAAQL,EAERL,EAAaZ,IAAmBuB,oBAAoBN,GAC1DV,QAAQC,IAAIU,EAAWE,EAAcE,EAAOV,EAAY,aA6ChE,oBAGA,qBAAKe,MAAO,CACRC,MAAO,QACRJ,QAZe,KAClBS,YAAmBpC,EAAME,IASzB,2BAGA,qBAAK4B,MAAO,CACRC,MAAO,QACRJ,QAhDa,KAEhB,MAGMU,EAAOC,SAASC,cAAc,QACpCF,EAAKG,aAAa,SAAU,OAC5BH,EAAKG,aAAa,SALK,gDAQvB,MAAMC,EAAc,CAChB,UAAa,2EACb,aAAgB,oCAChB,cAAiB,QACjB,MAAS,0DACT,uBAA0B,OAC1B,MAAS,sBAKb,IAAK,MAAMC,KAAKD,EAAQ,CACpB,MAAME,EAAQL,SAASC,cAAc,SACrCI,EAAMH,aAAa,OAAQ,UAC3BG,EAAMH,aAAa,OAAQE,GAC3BC,EAAMH,aAAa,QAASC,EAAOC,IACnCL,EAAKO,YAAYD,GAIrBL,SAASO,KAAKD,YAAYP,GAC1BA,EAAKS,UAeL","file":"static/js/42.e2986f30.chunk.js","sourcesContent":["import { initializeApp } from 'firebase/app';\nimport {\n    onAuthStateChanged,\n    signInWithEmailAndPassword,\n    GoogleAuthProvider,\n    signInWithPopup,\n    getAuth,\n    signInWithRedirect,\n    getRedirectResult\n} from 'firebase/auth';\nimport React, { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDwHyD8mDE6EeyWAjRtg078snMdagdoJ4o\",\n    authDomain: \"starcoin.firebaseapp.com\"\n};\nconst app = initializeApp(firebaseConfig);\n\nconst auth = getAuth(app);\n\nconst provider = new GoogleAuthProvider();\nfunction App() {\n    const location = useLocation();\n    useEffect(() => {\n        onAuthStateChanged(auth, (user) => {\n            console.log(user, 'user')\n        });\n        getRedirectResult(auth)\n            .then((result: any) => {\n                // This gives you a Google Access Token. You can use it to access Google APIs.\n                const credential = GoogleAuthProvider.credentialFromResult(result);\n                const token = credential!.accessToken;\n\n                // The signed-in user info.\n                const user = result.user;\n                console.log(credential, token, user, 'getRedirectResult')\n            }).catch((error) => {\n                // Handle Errors here.\n                const errorCode = error.code;\n                const errorMessage = error.message;\n                // The email of the user's account used.\n                const email = error;\n                // The AuthCredential type that was used.\n                const credential = GoogleAuthProvider.credentialFromError(error);\n                // ...\n                console.log(errorCode, errorMessage, email, credential, 'getRedirectResult')\n            });\n\n    }, [])\n    const signIn = () => {\n        const email = \"starcoin@gmail.com\";\n        const password = \"westar0720\";\n        signInWithEmailAndPassword(auth, email, password).then((res) => {\n            console.log(res)\n        })\n            .catch(() => {\n\n            });\n    }\n\n    const google = () => {\n        // signInWithRedirect(auth, provider);\n\n        localStorage.setItem('redirect', location.pathname);\n        signInWithPopup(auth, provider)\n            .then((result) => {\n                // This gives you a Google Access Token. You can use it to access the Google API.\n                const credential = GoogleAuthProvider.credentialFromResult(result);\n                const token = credential!.accessToken;\n                // The signed-in user info.\n                const user = result.user;\n                console.log(credential, token, user, 'success')\n                // ...\n            }).catch((error) => {\n                // Handle Errors here.\n                const errorCode = error.code;\n                const errorMessage = error.message;\n                // The email of the user's account used.\n                const email = error;\n                // The AuthCredential type that was used.\n                const credential = GoogleAuthProvider.credentialFromError(error);\n                console.log(errorCode, errorMessage, email, credential, 'error')\n                // ...\n            });\n    }\n\n    const oauthSignIn = () => {\n        // Google's OAuth 2.0 endpoint for requesting an access token\n        const oauth2Endpoint = 'https://accounts.google.com/o/oauth2/v2/auth';\n\n        // Create <form> element to submit parameters to OAuth 2.0 endpoint.\n        const form = document.createElement('form');\n        form.setAttribute('method', 'GET'); // Send as a GET request.\n        form.setAttribute('action', oauth2Endpoint);\n\n        // Parameters to pass to OAuth 2.0 endpoint.\n        const params: any = {\n            'client_id': '800652009519-dgcmhc64lmn188b3mfpli60dd7roifcn.apps.googleusercontent.com',\n            'redirect_uri': 'https://test.stcscan.io/user/test',\n            'response_type': 'token',\n            'scope': 'https://www.googleapis.com/auth/drive.metadata.readonly',\n            'include_granted_scopes': 'true',\n            'state': 'pass-through value'\n        };\n\n        // Add form parameters as hidden input values.\n        // eslint-disable-next-line\n        for (const p in params) {\n            const input = document.createElement('input');\n            input.setAttribute('type', 'hidden');\n            input.setAttribute('name', p);\n            input.setAttribute('value', params[p]);\n            form.appendChild(input);\n        }\n\n        // Add form to page and submit it to open the OAuth 2.0 endpoint.\n        document.body.appendChild(form);\n        form.submit();\n    }\n    const googleRiredct = () => {\n        signInWithRedirect(auth, provider);\n    }\n    return <>\n        <div onClick={signIn} style={{\n            color: '#fff'\n        }}>signIn</div>\n        <div style={{\n            color: '#fff'\n        }} onClick={google}>google</div>\n        <div style={{\n            color: '#fff'\n        }} onClick={googleRiredct}>googleRiredct</div>\n        <div style={{\n            color: '#fff'\n        }} onClick={oauthSignIn}>oauthSignIn</div>\n    </>\n}\nexport default App;"],"sourceRoot":""}